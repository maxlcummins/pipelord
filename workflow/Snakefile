import re
import subprocess
import os
from os import path
import git
import platform


configfile: "config/config_template.yaml"

# #Download the appropriate blast tool depending on the OS
# if path.exists("resources/tools/ncbi-blast-2.13.0+") == False:
#     print('blast directory not located, downloading blast...')
#     if platform.system() == "Linux":
#         os.system("wget -O resources/tools/ncbi-blast-2.13.0+.tar.gz https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/ncbi-blast-2.13.0+-x64-linux.tar.gz")
#     elif platform.system() == "Windows":
#         os.system("wget -O resources/tools/ncbi-blast-2.13.0+.tar.gz https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/ncbi-blast-2.13.0+-x64-win64.tar.gz")
#     elif platform.system() == "Darwin":
#         os.system("wget -O resources/tools/ncbi-blast-2.13.0+.tar.gz https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/ncbi-blast-2.13.0+-x64-macosx.tar.gz")
#     print('Unzipping...')
#     os.system("tar -xvf resources/tools/ncbi-blast-2.13.0+.tar.gz -C resources/tools/")

if path.exists("resources/tools/kma") == False:
    print('kma directory not located, downloading kma...')
    os.system("git clone https://bitbucket.org/genomicepidemiology/kma.git resources/tools/kma")
    os.system("cd resources/tools/kma && make")
    os.system("cd ../../..")

outdir = config["outdir"]
prefix = config["prefix"]
gene_dbs = expand(config["gene_dbs"])
plasmid_screen_db = expand(config["plasmid_screen_db"])

scheme = config["pmlst_scheme"]
email = config["email"]

if path.exists("resources/tools") == False:
    print("tools directory not located, creating tools directory...")
    os.system("mkdir -p resources/tools")

if config["input_type"] == "assemblies":
    (sample_ids,) = glob_wildcards(config["genome_path"]+"/{sample}.fasta")
elif config["input_type"] == "reads":
    (sample_ids,) = glob_wildcards(config["genome_path"]+"/{sample}.R1.fastq.gz")
else: "Config variable 'input_type' must be either 'assemblies' or 'reads'. Please check the config file"

print(sample_ids,)

if len([i for i in sample_ids if "." in i]) > 0:
    print("\n\n")
    print(
        "Warning: One or more of your read sets has a full-stop/period ('.') in some of the sample names, shown below."
    )
    print("This is a problem because this character breaks many bioinformatic tools.")
    print(
        "It is a character usually reserved for separating sample names from suffixes like '.fasta'."
    )
    print([i for i in sample_ids if "." in i])
    print("\n\n")
    sys.exit()

# if any(r.match(sample_ids) for sample_ids in sample_ids):
#   print(r.match(sample_ids) for sample_ids in sample_ids)


rule all:
    input:
        expand( config["outdir"]+"/{prefix}/shovill/assemblies/{sample}.fasta", sample=sample_ids, prefix=prefix) if config["genotype_modules"]["run_genome_assembly"] else [],
        expand(config['outdir']+"/{prefix}/cgmlstfinder/cgmlst_summaries/{sample}.txt", sample=sample_ids, prefix=prefix) if config["genotype_modules"]["run_cgmlstfinder"] else [],
        expand(config['outdir']+"/{prefix}/spifinder/spifinder_out/{sample}.out", sample=sample_ids, prefix=prefix) if config["genotype_modules"]["run_spifinder"] else [],
        expand(config['outdir']+"/{prefix}/summaries/spi_report.txt", sample=sample_ids, prefix=prefix) if config["genotype_modules"]["run_spifinder"] else [],
        expand(config["outdir"]+"/{prefix}/summaries/assembly_stats.txt",prefix=prefix) if config["genotype_modules"]["run_assembly_stats"] else [],
        expand(config["outdir"]+"/{prefix}/summaries/genotype.txt", prefix=prefix) if config["genotype_modules"]["run_abricate"] else [],
        expand(config["outdir"]+"/{prefix}/summaries/pMLST.txt", scheme=scheme, sample=sample_ids, prefix=prefix) if config["genotype_modules"]["run_plasmid_mlst"] else [],
        expand(config["outdir"]+"/{prefix}/summaries/pointfinder.txt", prefix=prefix) if config["genotype_modules"]["run_pointfinder"] else [],
        expand(config['outdir']+"/{prefix}/QC_workflow/bracken/{sample}.bracken.txt", sample=sample_ids, prefix=prefix) if config["genotype_modules"]["run_kraken2_and_bracken"] else [],
        expand(config['outdir']+"/{prefix}/QC_workflow/summaries/bracken_report.txt", prefix=prefix) if config["genotype_modules"]["run_kraken2_and_bracken"] else [],
        expand(config["outdir"]+"/{prefix}/fastp/{sample}.R1.fastq.gz",sample=sample_ids,prefix=prefix),
        expand(config["outdir"]+"/{prefix}/mlst/{sample}_mlst.txt",sample=sample_ids,prefix=prefix) if config["genotype_modules"]["run_mlst"] else [],
        expand(config["outdir"]+"/{prefix}/summaries/mlst.txt", prefix=prefix) if config["genotype_modules"]["run_mlst"] else [],
        expand(config["outdir"]+"/{prefix}/dfast/gffs/{sample}.gff",sample=sample_ids,prefix=prefix) if config["genotype_modules"]["run_dfast_genome_annotation"] else [],
        expand(config["outdir"]+"/{prefix}/abricate_plasmids/{plasmid_screen_db}/{sample}.tab",sample=sample_ids, plasmid_screen_db=plasmid_screen_db,prefix=prefix) if config["genotype_modules"]["run_abricate_plasmid"] else [],
        "resources/dbs/dfast" if config["genotype_modules"]["run_dfast_genome_annotation"] and path.exists("resources/dbs/dfast") == False else [],


onerror:
    print("An error occurred")
    # Email user
    if config["email"] != "":
        shell(
            "echo Your Snakemake job with prefix '{prefix}' has failed. | mail -s 'Snakemake job has failed' {email}"
        )


# Please code deities forgive my frankenstein onsuccess script. I will repackage it in a future distribution into a script... for now I just need it to run!
onsuccess:
    # Announce job finish
    print("Job finished")
    # Email user
    if config["email"] != "":
        shell(
            "echo Your Snakemake job with prefix '{prefix}' has finished. It has been written to '{outdir}/{prefix}/summaries/' | mail -s 'Snakemake job has finished' {email}"
        )


# include: "rules/roary_pangenome.smk"
if config["input_type"] == "reads":
    include: "rules/read_cleaning.smk"
if config["genotype_modules"]["run_dfast_genome_annotation"]:
    include: "rules/genome_annotation.smk"
if config["genotype_modules"]["run_genome_assembly"]:
    include: "rules/genome_assembly.smk"
if config["genotype_modules"]["run_kraken2_and_bracken"]:
    include: "rules/species_id.smk"
if config["genotype_modules"]["run_abricate"] or config["genotype_modules"]["run_abricate_plasmid"]:
    include: "rules/genotype_abricate.smk"
if config["genotype_modules"]["run_pointfinder"]:
    include: "rules/point_mutations.smk"
if config["genotype_modules"]["run_mlst"]:
    include: "rules/strain_mlst.smk"
if config["genotype_modules"]["run_plasmid_mlst"]:
    include: "rules/plasmid_mlst.smk"
if config["genotype_modules"]["run_cgmlstfinder"]:
    include: "rules/cgmlstfinder.smk"
if config["genotype_modules"]["run_spifinder"]:
    include: "rules/spifinder.smk"
if config["genotype_modules"]["run_summarise"]:
    include: "rules/summarise.smk"

ruleorder: abricate_plasmid_run > abricate_run